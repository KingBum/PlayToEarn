/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SimpleToken,
  SimpleTokenInterface,
} from "../../contracts/SimpleToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040518060400160405280600b81526020017f53696d706c65546f6b656e00000000000000000000000000000000000000000081525060009080519060200190620000519291906200014a565b506040518060400160405280600281526020017f5354000000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f9291906200014a565b506012600260006101000a81548160ff021916908360ff160217905550348015620000c957600080fd5b50600260009054906101000a900460ff16600a620000e8919062000394565b620f4240620000f89190620003e5565b600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620004ab565b828054620001589062000475565b90600052602060002090601f0160209004810192826200017c5760008555620001c8565b82601f106200019757805160ff1916838001178555620001c8565b82800160010185558215620001c8579182015b82811115620001c7578251825591602001919060010190620001aa565b5b509050620001d79190620001db565b5090565b5b80821115620001f6576000816000905550600101620001dc565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620002885780860481111562000260576200025f620001fa565b5b6001851615620002705780820291505b8081029050620002808562000229565b945062000240565b94509492505050565b600082620002a3576001905062000376565b81620002b3576000905062000376565b8160018114620002cc5760028114620002d7576200030d565b600191505062000376565b60ff841115620002ec57620002eb620001fa565b5b8360020a915084821115620003065762000305620001fa565b5b5062000376565b5060208310610133831016604e8410600b8410161715620003475782820a905083811115620003415762000340620001fa565b5b62000376565b62000356848484600162000236565b9250905081840481111562000370576200036f620001fa565b5b81810290505b9392505050565b6000819050919050565b600060ff82169050919050565b6000620003a1826200037d565b9150620003ae8362000387565b9250620003dd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000291565b905092915050565b6000620003f2826200037d565b9150620003ff836200037d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200043b576200043a620001fa565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200048e57607f821691505b60208210811415620004a557620004a462000446565b5b50919050565b61091b80620004bb6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd14610085578063313ce567146100a357806370a08231146100c157806395d89b41146100f1578063a9059cbb1461010f575b600080fd5b61006f61013f565b60405161007c9190610534565b60405180910390f35b61008d6101cd565b60405161009a919061056f565b60405180910390f35b6100ab6101d3565b6040516100b891906105a6565b60405180910390f35b6100db60048036038101906100d69190610624565b6101e6565b6040516100e8919061056f565b60405180910390f35b6100f96101fe565b6040516101069190610534565b60405180910390f35b6101296004803603810190610124919061067d565b61028c565b60405161013691906106d8565b60405180910390f35b6000805461014c90610722565b80601f016020809104026020016040519081016040528092919081815260200182805461017890610722565b80156101c55780601f1061019a576101008083540402835291602001916101c5565b820191906000526020600020905b8154815290600101906020018083116101a857829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b6001805461020b90610722565b80601f016020809104026020016040519081016040528092919081815260200182805461023790610722565b80156102845780601f1061025957610100808354040283529160200191610284565b820191906000526020600020905b81548152906001019060200180831161026757829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610310576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610307906107a0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610380576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103779061080c565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103cf919061085b565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610425919061088f565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610489919061056f565b60405180910390a36001905092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104d55780820151818401526020810190506104ba565b838111156104e4576000848401525b50505050565b6000601f19601f8301169050919050565b60006105068261049b565b61051081856104a6565b93506105208185602086016104b7565b610529816104ea565b840191505092915050565b6000602082019050818103600083015261054e81846104fb565b905092915050565b6000819050919050565b61056981610556565b82525050565b60006020820190506105846000830184610560565b92915050565b600060ff82169050919050565b6105a08161058a565b82525050565b60006020820190506105bb6000830184610597565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105f1826105c6565b9050919050565b610601816105e6565b811461060c57600080fd5b50565b60008135905061061e816105f8565b92915050565b60006020828403121561063a576106396105c1565b5b60006106488482850161060f565b91505092915050565b61065a81610556565b811461066557600080fd5b50565b60008135905061067781610651565b92915050565b60008060408385031215610694576106936105c1565b5b60006106a28582860161060f565b92505060206106b385828601610668565b9150509250929050565b60008115159050919050565b6106d2816106bd565b82525050565b60006020820190506106ed60008301846106c9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061073a57607f821691505b6020821081141561074e5761074d6106f3565b5b50919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b600061078a6014836104a6565b915061079582610754565b602082019050919050565b600060208201905081810360008301526107b98161077d565b9050919050565b7f496e76616c696420726563697069656e74206164647265737300000000000000600082015250565b60006107f66019836104a6565b9150610801826107c0565b602082019050919050565b60006020820190508181036000830152610825816107e9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061086682610556565b915061087183610556565b9250828210156108845761088361082c565b5b828203905092915050565b600061089a82610556565b91506108a583610556565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108da576108d961082c565b5b82820190509291505056fea26469706673582212204c45b4b3363580360fa5e62dac4a546a40812d98eb410bf88507a781addd632664736f6c63430008090033";

type SimpleTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleToken__factory extends ContractFactory {
  constructor(...args: SimpleTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleToken> {
    return super.deploy(overrides || {}) as Promise<SimpleToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SimpleToken {
    return super.attach(address) as SimpleToken;
  }
  override connect(signer: Signer): SimpleToken__factory {
    return super.connect(signer) as SimpleToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleTokenInterface {
    return new utils.Interface(_abi) as SimpleTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleToken {
    return new Contract(address, _abi, signerOrProvider) as SimpleToken;
  }
}
